import { signIn, signOut, useSession } from "next-auth/react";
import Head from "next/head";
import React, { useEffect, useState } from "react";

import { CreatePlaceContent } from "@/components/CreatePlaceContent";
import { PlacePin } from "@/components/PlacePin";
import { Button } from "@/components/ui/button";
import { Dialog, DialogTrigger } from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import { api } from "@/utils/api";
import {
  Autocomplete,
  GoogleMap,
  InfoWindowF,
  LoadScript,
  MarkerF,
} from "@react-google-maps/api";

/* --------------------------------- Styles --------------------------------- */

const containerStyle = {
  width: "100%",
  height: "100vh",
};

/* ------------------------------- Interfaces ------------------------------- */
export type location = { lat: number; lng: number };
const mockPlaces = [
  {
    location_id: "4090348",
    name: "Cafe' by Navy Wives Association",
    lat: 13.720079240212836,
    lng: 100.38313747882236,
  },
  {
    location_id: "4090348",
    name: "Cafe' by Navy Wives Association",
    lat: 13.717722405250667,
    lng: 100.38350025900671,
  },
  {
    location_id: "4090348",
    name: "Cafe' by Navy Wives Association",
    lat: 13.71232656240719,
    lng: 100.4520912394102,
  },
];

export default function Home() {
  const { data: session, status } = useSession();
  const [marker, setMarker] = useState<location>();
  const [coords, setCoords] = useState<location>();
  const [open, setOpen] = useState(false);
  const {
    data: places,
    isLoading: placeLoading,
    refetch: refetchPlace,
  } = api.place.getAll.useQuery();

  const [autocomplete, setAutocomplete] =
    useState<google.maps.places.Autocomplete>();

  const onAutocompleteLoad = (autoC: google.maps.places.Autocomplete) =>
    setAutocomplete(autoC);

  const onPlaceChanged = () => {
    const autoC = autocomplete;
    if (!autoC) return;
    const geometry = autoC.getPlace().geometry;
    if (!geometry) return;
    const location = geometry.location;
    if (!location) return;

    const lat = location.lat();
    const lng = location.lng();

    setCoords({ lat, lng });
  };

  const onClickMap = (e: google.maps.MapMouseEvent) => {
    const lat = e.latLng?.lat() as number;
    const lng = e.latLng?.lng() as number;
    setMarker({ lat, lng });
  };

  const onPlaceCreated = () => {
    setOpen(!open);
    refetchPlace();
  };

  useEffect(() => {
    navigator.geolocation.getCurrentPosition(
      ({ coords: { latitude, longitude } }) => {
        setCoords({ lat: latitude, lng: longitude });
      },
    );
  }, []);

  if (status !== "loading" && !session) signIn();

  return (
    <>
      <Head>
        <title>Travel Tracker</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <LoadScript
        id="script-loader"
        googleMapsApiKey="AIzaSyDNc3leOhd15yiV8tkx28h-uTaYq-dbpGo"
        libraries={["places"]}
      >
        <Dialog open={open} onOpenChange={setOpen}>
          <CreatePlaceContent
            location={marker}
            onCreated={() => {
              onPlaceCreated();
            }}
          />
          <Autocomplete
            onLoad={onAutocompleteLoad}
            onPlaceChanged={onPlaceChanged}
          >
            <div>
              <Input className="" placeholder="Search…" />
            </div>
          </Autocomplete>
          <GoogleMap
            mapContainerStyle={containerStyle}
            center={coords}
            zoom={16}
            onClick={onClickMap}
          >
            {marker && marker.lat && marker.lng && (
              <MarkerF position={{ lat: marker.lat, lng: marker.lng }}>
                <InfoWindowF position={{ lat: marker.lat, lng: marker.lng }}>
                  <DialogTrigger asChild>
                    <Button>เปิดประเด็น</Button>
                  </DialogTrigger>
                </InfoWindowF>
              </MarkerF>
            )}
            {places?.map((place, i) => {
              return (
                <InfoWindowF
                  key={i}
                  position={{
                    lat: place.lat,
                    lng: place.lng,
                  }}
                >
                  <PlacePin placeData={place} />
                </InfoWindowF>
              );
            })}
          </GoogleMap>
        </Dialog>
      </LoadScript>
    </>
  );
}
