// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgres"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

model Example {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    places        Place[]
    reviews       Review[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Place {
    id          String   @id @default(cuid())
    name        String
    description String?
    rate        Float?   @default(0)
    lat         Float
    lng         Float
    images      String[]
    userId      String
    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    reviews     Review[]
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}

model Review {
    id        String       @id @default(cuid())
    comment   String
    rate      Float
    images    String[]
    userId    String
    placeId   String
    places    Place        @relation(fields: [placeId], references: [id], onDelete: Cascade)
    user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    status    ReviewStatus @default(ACTIVE)
    createdAt DateTime     @default(now())
    updatedAt DateTime     @updatedAt
}

enum ReviewStatus {
    DRAFT
    ACTIVE
}
